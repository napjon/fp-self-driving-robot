;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/14/2012
;Author  : PerTic@n
;Company : If You Like This Software,Buy It
;Comments:
;
;
;Chip type               : ATmega8535
;Program type            : Application
;AVR Core Clock frequency: 4.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;  int enc_ka, enc_ki,rec_ki,rec_ka;
;     unsigned char buff[33];
;     int timer,timerec;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0024 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0025 enc_ki++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0026 
; 0000 0027 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 002B {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002C enc_ka++;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002D 
; 0000 002E }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0061 {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0062 char status,data;
; 0000 0063 status=UCSRA;
;PCODE: $0000001F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0064 data=UDR;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0065 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0066    {
; 0000 0067    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0068 #if RX_BUFFER_SIZE == 256
; 0000 0069    // special case for receiver buffer size=256
; 0000 006A    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 006B #else
; 0000 006C    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 006D    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 006E       {
; 0000 006F       rx_counter=0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0070       rx_buffer_overflow=1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0071       }
; 0000 0072 #endif
; 0000 0073    }
;PCODE: $0000003E VOL: 0
; 0000 0074 }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 007B {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 007C char data;
; 0000 007D while (rx_counter==0);
;PCODE: $00000046 VOL: 0
;	data -> R17
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 007E data=rx_buffer[rx_rd_index++];
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 007F #if RX_BUFFER_SIZE != 256
; 0000 0080 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0081 #endif
; 0000 0082 #asm("cli")
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
	cli
;PCODE: $0000005B VOL: 0
; 0000 0083 --rx_counter;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0084 #asm("sei")
;PCODE: $0000005F VOL: 0
	sei
;PCODE: $00000060 VOL: 0
; 0000 0085 return data;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0086 }
;PCODE: $00000064 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0096 {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0097 if (tx_counter)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0098    {
; 0000 0099    --tx_counter;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 009A    UDR=tx_buffer[tx_rd_index++];
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009B #if TX_BUFFER_SIZE != 256
; 0000 009C    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 009D #endif
; 0000 009E    }
;PCODE: $0000007A VOL: 0
; 0000 009F }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00A6 {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00A7 while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000081 VOL: 0
;	c -> Y+0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A8 #asm("cli")
;PCODE: $00000088 VOL: 0
	cli
;PCODE: $00000089 VOL: 0
; 0000 00A9 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00AA    {
; 0000 00AB    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00AC #if TX_BUFFER_SIZE != 256
; 0000 00AD    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00AE #endif
; 0000 00AF    ++tx_counter;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B0    }
; 0000 00B1 else
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00B2    UDR=c;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00B3 #asm("sei")
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
	sei
;PCODE: $000000A9 VOL: 0
; 0000 00B4 }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00BD {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00BE TCNT0=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00BF 
; 0000 00C0 timer++;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00C1 
; 0000 00C2 }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;
;
;
;#define dir_kanan PORTB.0
;#define dir_kiri PORTB.6
;#define pwm_kanan OCR1BL
;#define pwm_kiri OCR1AL
;
;
;
;void motor_init()
; 0000 00CE {
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00CF  DDRB.0 = 1;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00D0  DDRB.6 = 1;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00D1 }
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;
;void maju()
; 0000 00D4 {
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00D5 while (enc_ka<145 && enc_ki<145){
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00D6  dir_kanan = 0;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00D7  dir_kiri = 0;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00D8  pwm_kanan = 50;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00D9  pwm_kiri = 50;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00DA //delay_ms(1000);
; 0000 00DB lcd_gotoxy(0,1);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00DC              sprintf(buff,"%d %d", enc_ki,enc_ka);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00DD 
; 0000 00DE         lcd_puts(buff);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00DF 
; 0000 00E0 }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00E1 rec_ki = enc_ki;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00E2 rec_ka = enc_ka;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00E3 enc_ka = 0;
;PCODE: $000000EF VOL: 0
; 0000 00E4 enc_ki = 0;
;PCODE: $000000F0 VOL: 0
; 0000 00E5 
; 0000 00E6 }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;
;void belok_kanan()
; 0000 00E9 {
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00EA timer = 0;
;PCODE: $000000F5 VOL: 0
; 0000 00EB while
;PCODE: $000000F6 VOL: 0
; 0000 00EC ((enc_ka<110 && enc_ki<110) ||
; 0000 00ED //(timer<=105)){
; 0000 00EE (timer<=115)){
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00EF  dir_kanan = 1;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00F0  dir_kiri = 0;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00F1  pwm_kanan =50;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00F2  pwm_kiri = 125;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00F3 //delay_ms(1900);
; 0000 00F4 
; 0000 00F5 lcd_gotoxy(0,1);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00F6              sprintf(buff,"%d %d", enc_ki,enc_ka);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00F7         lcd_puts(buff);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00F8 
; 0000 00F9 }
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00FA timerec = timer;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00FB rec_ki = enc_ki;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00FC rec_ka = enc_ka;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00FD enc_ka = 0;
;PCODE: $00000129 VOL: 0
; 0000 00FE enc_ki = 0;
;PCODE: $0000012A VOL: 0
; 0000 00FF maju();
;PCODE: $0000012B VOL: 0
; 0000 0100 
; 0000 0101 }
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;
;void belok_kiri()
; 0000 0104 {
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0105   timer = 0;
;PCODE: $00000130 VOL: 0
; 0000 0106 while
;PCODE: $00000131 VOL: 0
; 0000 0107 ((enc_ka<130 && enc_ki<130) ||
; 0000 0108 //(timer<=117)){
; 0000 0109 (timer<=125)){
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 010A  dir_kanan = 0;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 010B  dir_kiri = 1;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 010C  pwm_kanan = 125;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 010D  pwm_kiri = 50;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 010E  //delay_ms(2250)
; 0000 010F         lcd_gotoxy(0,1);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0110         sprintf(buff,"%d %d", enc_ki,enc_ka);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0111         lcd_puts(buff);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0112 
; 0000 0113 }
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0114 timerec = timer;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0115 rec_ki = enc_ki;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0116 rec_ka = enc_ka;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0117 enc_ka = 0;
;PCODE: $00000164 VOL: 0
; 0000 0118 enc_ki = 0;
;PCODE: $00000165 VOL: 0
; 0000 0119 maju();
;PCODE: $00000166 VOL: 0
; 0000 011A }
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;
;void stop()
; 0000 011D {
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 011E  pwm_kanan = 0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 011F  pwm_kiri = 0;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0120 }
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;
;// Declare your global variables here
;unsigned char i,j, data_rx[16];
;
;
;
;
;void main(void)
; 0000 0129 {
;PCODE: $00000171 VOL: 0
; 0000 012A // Declare your local variables here
; 0000 012B 
; 0000 012C // Input/Output Ports initialization
; 0000 012D // Port A initialization
; 0000 012E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 012F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0130 PORTA=0x00;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0131 DDRA=0x00;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0132 
; 0000 0133 // Port B initialization
; 0000 0134 // Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 0135 // State7=0 State6=0 State5=T State4=T State3=T State2=T State1=0 State0=0
; 0000 0136 PORTB=0x00;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0137 DDRB=0xC3;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0138 
; 0000 0139 // Port C initialization
; 0000 013A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 013B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 013C PORTC=0x00;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 013D DDRC=0x00;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 013E 
; 0000 013F // Port D initialization
; 0000 0140 // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0141 // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 0142 PORTD=0x00;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0143 DDRD=0x30;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0144 
; 0000 0145 // Timer/Counter 0 initialization
; 0000 0146 // Clock source: System Clock
; 0000 0147 // Clock value: 15.625 kHz
; 0000 0148 // Mode: Normal top=0xFF
; 0000 0149 // OC0 output: Disconnected
; 0000 014A TCCR0=0x04;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 014B TCNT0=0x00;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 014C OCR0=0x00;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 014D 
; 0000 014E // Timer/Counter 1 initialization
; 0000 014F // Clock source: System Clock
; 0000 0150 // Clock value: 15.625 kHz
; 0000 0151 // Mode: Ph. correct PWM top=0x00FF
; 0000 0152 // OC1A output: Non-Inv.
; 0000 0153 // OC1B output: Non-Inv.
; 0000 0154 // Noise Canceler: Off
; 0000 0155 // Input Capture on Falling Edge
; 0000 0156 // Timer1 Overflow Interrupt: Off
; 0000 0157 // Input Capture Interrupt: Off
; 0000 0158 // Compare A Match Interrupt: Off
; 0000 0159 // Compare B Match Interrupt: Off
; 0000 015A TCCR1A=0xA1;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 015B TCCR1B=0x04;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 015C TCNT1H=0x00;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 015D TCNT1L=0x00;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 015E ICR1H=0x00;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 015F ICR1L=0x00;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0160 OCR1AH=0x00;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0161 OCR1AL=0x00;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0162 OCR1BH=0x00;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0163 OCR1BL=0x00;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0164 
; 0000 0165 // Timer/Counter 2 initialization
; 0000 0166 // Clock source: System Clock
; 0000 0167 // Clock value: Timer2 Stopped
; 0000 0168 // Mode: Normal top=0xFF
; 0000 0169 // OC2 output: Disconnected
; 0000 016A ASSR=0x00;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 016B TCCR2=0x00;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 016C TCNT2=0x00;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 016D OCR2=0x00;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 016E 
; 0000 016F // External Interrupt(s) initialization
; 0000 0170 // INT0: On
; 0000 0171 // INT0 Mode: Falling Edge
; 0000 0172 // INT1: On
; 0000 0173 // INT1 Mode: Falling Edge
; 0000 0174 // INT2: Off
; 0000 0175 GICR|=0xC0;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0176 MCUCR=0x0A;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0177 MCUCSR=0x00;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0178 GIFR=0xC0;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0179 
; 0000 017A // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 017B TIMSK=0x01;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 017C 
; 0000 017D // USART initialization
; 0000 017E // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 017F // USART Receiver: On
; 0000 0180 // USART Transmitter: On
; 0000 0181 // USART Mode: Asynchronous
; 0000 0182 // USART Baud Rate: 9600
; 0000 0183 UCSRA=0x00;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0184 UCSRB=0xD8;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0185 UCSRC=0x86;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0186 UBRRH=0x00;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0187 UBRRL=0x19;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0188 
; 0000 0189 // Analog Comparator initialization
; 0000 018A // Analog Comparator: Off
; 0000 018B // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 018C ACSR=0x80;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 018D SFIOR=0x00;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 018E 
; 0000 018F // ADC initialization
; 0000 0190 // ADC disabled
; 0000 0191 ADCSRA=0x00;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0192 
; 0000 0193 // SPI initialization
; 0000 0194 // SPI disabled
; 0000 0195 SPCR=0x00;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0196 
; 0000 0197 // TWI initialization
; 0000 0198 // TWI disabled
; 0000 0199 TWCR=0x00;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 019A 
; 0000 019B // Alphanumeric LCD initialization
; 0000 019C // Connections are specified in the
; 0000 019D // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 019E // RS - PORTA Bit 0
; 0000 019F // RD - PORTA Bit 1
; 0000 01A0 // EN - PORTA Bit 2
; 0000 01A1 // D4 - PORTA Bit 4
; 0000 01A2 // D5 - PORTA Bit 5
; 0000 01A3 // D6 - PORTA Bit 6
; 0000 01A4 // D7 - PORTA Bit 7
; 0000 01A5 // Characters/line: 16
; 0000 01A6 lcd_init(16);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 01A7 
; 0000 01A8 // Global enable interrupts
; 0000 01A9 #asm("sei")
;PCODE: $000001C5 VOL: 0
	sei
;PCODE: $000001C6 VOL: 0
; 0000 01AA  motor_init();
;PCODE: $000001C7 VOL: 0
; 0000 01AB 
; 0000 01AC while (1)
;PCODE: $000001C8 VOL: 0
; 0000 01AD       {
; 0000 01AE            lcd_gotoxy(0,0);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 01AF         lcd_putsf("tunggu perintah");
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 01B0         for(i=0;i<32;i++)
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 01B1             {
; 0000 01B2                 data_rx[i] = getchar();
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 01B3                 if(data_rx[i]=='0')break;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 01B4             }
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 01B5         j=i;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 01B6         //lcd_gotoxy(0,0);
; 0000 01B7         for(i=0;i<=j;i++)
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 01B8             {
; 0000 01B9 
; 0000 01BA 
; 0000 01BB                 //lcd_putchar(data_rx[i]);
; 0000 01BC                 switch(data_rx[i])
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 01BD                 {
; 0000 01BE                 case 'O' : maju();printf("0"); break;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 01BF                 case 'o' : belok_kanan();printf("1"); break;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 01C0                 case '_' : belok_kiri();printf("2"); break;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 01C1                 }
;PCODE: $00000224 VOL: 0
; 0000 01C2             }
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 01C3         stop();
;PCODE: $0000022B VOL: 0
; 0000 01C4         lcd_gotoxy(0,0);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 01C5         lcd_putsf("sampai");
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 01C6          //printf(" %d ", timerec);
; 0000 01C7         //printf(" %d %d",rec_ki,rec_ka);
; 0000 01C8         delay_ms(2000);
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 01C9 
; 0000 01CA 
; 0000 01CB 
; 0000 01CC 
; 0000 01CD 
; 0000 01CE       };
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 01CF }
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
